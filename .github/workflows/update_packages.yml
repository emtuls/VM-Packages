name: Update packages

on:
  workflow_dispatch:
  schedule:
    # Runs Wednesdays at a weird time (22:21 UTC) to avoid delays during
    # periods of high loads of GitHub Actions workflow runs.
    - cron: '4 22 * * 3'

jobs:
  update:
    runs-on: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Install python dependency 'requests'
        run: pip install requests
      - name: Set git up
        run: |
          git config user.email 'vm-packages@google.com'
          git config user.name 'vm-packages'
      - name: Update packages
        run: |
          $root = pwd
          New-Item test_logs -itemType Directory | Out-Null
          foreach ($packagePath in (Get-ChildItem packages)){
            $package = $packagePath.Name
            # Find the best update type and version
            $highestVersionObj = [version]"0.0"
            $bestUpdateType = $null
            # Check each type for $package to find the best version
            foreach ($UPDATE_TYPE in ('DEPENDENCIES', 'GITHUB_URL', 'VERSION_URL', 'DYNAMIC_URL', 'MSIXBUNDLE_URL')) {
              # Find a potential version string but don't modify the files yet
              $versionStr = python scripts\utils\update_package.py $package --update_type $UPDATE_TYPE
              # Clean changes and built packages
              git restore .
              if ($versionStr) {
                try {
                  $currentVersionObj = [version]$versionStr
                  if ($currentVersionObj -gt $highestVersionObj) {
                    $highestVersionObj = $currentVersionObj
                    $bestUpdateType = $UPDATE_TYPE
                    echo "Found new best version: $highestVersionObj from $bestUpdateType"
                  }
                } catch {
                  Write-Warning "Could not parse version string: $versionStr"
                }
              }
            }
            # If no valid update was found, move to the next package
            if (-not $bestUpdateType) {
              echo "No valid updates found for $package"
              continue
            }
            echo "Highest version is $($highestVersionObj.ToString()). Proceeding with final test and commit."
            # Now, re-run the update script for ONLY the best update type found
            $newVersion = python scripts\utils\update_package.py $package --update_type $bestUpdateType
            scripts\test\test_install.ps1 -max_tries 1 $package
            $tested = $?
            cd $root
            if ($tested) {
              git add "packages/$package/"
              if ($bestUpdateType -eq 'DYNAMIC_URL') {
                git commit -m "Fix broken hash in $package"
              }
              else {
                git commit -m "Update $package to $newVersion"
              }
            } else {
              echo "Test for highest version $newVersion FAILED."
            }
            # Always clean up everything at the end
            choco uninstall $package -y -r
            git restore .
            Remove-Item built_pkgs -Recurse -ErrorAction Ignore
          }
          Exit(0)
      - name: Upload logs to artifacts
        uses: ./.github/actions/upload-logs
        if: always()
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@a4f52f8033a6168103c2538976c07b467e8163bc # v6.0.1
        with:
          title: ':robot: Package update'
          body: 'Automated package update created by [update_packages.yml](https://github.com/mandiant/VM-Packages/blob/main/.github/workflows/update_packages.yml). Note the update is triggered weekly and will modify this PR if it has not been merged.'
          branch: package-update
          author: vm-packages <vm-packages@google.com>
          add-paths: packages/*
          # GH actions can not trigger other GH actions,
          # use a Personal Access Token to trigger the CI workflow in the created PR
          token: ${{ secrets.REPO_TOKEN }}
